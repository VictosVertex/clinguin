
Backends
########

The backends listed here are provided with clinguin. 
All available functions that can be referenced in the :ref:`ui-state` for each backend are listed below.
Notice that all backends will also include the functionalities of the ones they extend.

The source code for the backends can be found  in `github <https://github.com/krr-up/clinguin/tree/master/clinguin/server/application/backends>`_.

AbstractBackend
---------------

    Serves as the must basic class for creating a custom backend.
    This class does not have any clingo functionalities.

    .. currentmodule:: clinguin.server.application.abstract_backend

    .. autoclass:: AbstractBackend
        :members:
        :exclude-members: register_options

.. currentmodule:: clinguin.server.application.backends

ClingoBackend
---------------

    Exteds :ref:`AbstractBackend` with basic clingo functionality for single-shot solving.

    .. admonition:: Examples
        :class: example

        * `sudoku_single_shot <https://github.com/krr-up/clinguin/tree/master/examples/tkinter/sudoku_basic>`_



    .. autoclass:: ClingoBackend
        :members:
        :noindex:
        :exclude-members: register_options, get




ClingoMultishotBackend
----------------------

    Extends :ref:`ClingoBackend` with functionality for multi-shot solving. Adds options to access and store assumptions and externals.

    .. admonition:: Examples
        :class: example

        * `sudoku <https://github.com/krr-up/clinguin/tree/master/examples/angular/sudoku>`_
        * `jobshop <https://github.com/krr-up/clinguin/tree/master/examples/angular/jobshop>`_
        * `placement <https://github.com/krr-up/clinguin/tree/master/examples/angular/placement>`_


    .. autoclass:: ClingoMultishotBackend
        :members:
        :noindex:
        :exclude-members: register_options



ClingraphBackend
----------------

    Extends :ref:`ClingoMultishotBackend` with functionality to render and interact with `clingraph <https://clingraph.readthedocs.io/en/latest/>`_ images.

    .. admonition:: Examples
        :class: example

        * `graph_coloring <https://github.com/krr-up/clinguin/tree/master/examples/angular/graph_coloring>`_
        * `tree_browser <https://github.com/krr-up/clinguin/tree/master/examples/angular/tree_browser>`_
        * `ast <https://github.com/krr-up/clinguin/tree/master/examples/angular/ast>`_


    This backend will allow the use of clingraph images inside a canvas element.
    To use this feature, the user must provide a clingraph visualization encoding via the command line in argument ``--clingraph-files``.
    The input to this encoding will be the :ref:`domain-state` (same input as for the :ref:`ui-files`).

    .. tip:: 

        The clingraph encoding will also have information about brave, and cautious consequences. 
        So dont be afraid to use it in the graphs!

    A clinguin ``canvas`` is enhanced with an attribute ``image_type``. 
    When the value for this attirbute starts with  ``clingraph`` it will be substituted by the :ref:`ClingraphBackend` for the ``svg`` representation of the graph.
    By default the graph named ``default`` will be used, another graph with name ``X`` can be used by setting the image type to ``clingraph__X``

    .. note:: 

        To use this backend with the :ref:`TkinterFrotned`, you must provide the option ``--intermediate-format=png``.

    .. admonition:: Examples
        :class: example
        
        Creates a canvas in a window that will contain the default clingraph graph

        .. code-block:: 

            elem(c, canvas, window).
            attr(c, image_type, clingraph).


    **Interacting with the graph**

        To interact with the clingraph nodes/edges, additional steps must be made.
        Each node/edge must be added to the UI as an element inside the canvas using the type  ``svg_node`` (``svg_edge``).
        This type of elements require the identifier of the clingraph node/edge in argument ``clingraph_id``
        to link the interactivity with the svg element generated by clingraph.

        .. admonition:: Examples
            :class: example

            Continuation of the previous example.

            .. code-block:: 

                elem(n(X), svg_node, c).
                attr(n(X), clingraph_id, X):- node(X).

            ``node(X)`` is generated in the `ui-files`


        .. tip:: 

            Notice that the clingraph nodes are not accesible by the `ui-files`.
            Therefore, nodes of the clingraph images have to be generated again in this encoding.
            
            Consider separating the clingraph node generation into a diferent encoding,
            and then including it in the UI and clingraph encodings.

        .. warning:: 

            The interactive feature only work in web based frontends, not in Tkinter.

        .. note::

            ``update`` actions applied to clingraph elements (`svg_nodes`) will update the html style, not the graphviz properties. 
            Therefore, it can be used to set things like visibility and opacity but not internal clingraph values. 


    .. autoclass:: ClingraphBackend
        :members:
        :noindex:
        :exclude-members: register_options



ExplanationBackend
------------------

    Extends :ref:`ClingoMultishotBackend` with functionality to compute Minumal Unsatisfiable Cores (MUC) when there is an UNSAT output.

    .. admonition:: Examples
        :class: example

        * `sudoku_advanced <https://github.com/krr-up/clinguin/tree/master/examples/angular/sudoku_advanced>`_
        * `sudoku_explained <https://github.com/krr-up/clinguin/tree/master/examples/tkinter/sudoku_explained>`_


    When the :ref:`domain-control` produces an unsatisfiable output this backend will perform subsequents calls
    to find the subset minimal assumptions that caused the unsatisfiablity.
    These assuptions not only include those selected by the user, but also can be part of the input.
    This is needed when some of the input facts also want to be shown to the user.
    Therefore, this backend adds an argument to the command line: ``--assumption-signature`` 
    in which the user can select which signatures will be considered as assumptions in the MUC computation.

    .. admonition:: Examples
        :class: example

        The `sudoku_advanced <https://github.com/krr-up/clinguin/tree/master/examples/angular/sudoku_advanced>`_ example
        provides the argument ``--assumption-signature=initial,3`` so that all the initial values of the sudoku
        are also considered in the unsat core and therefore shown to the user. 

        .. code-block:: 

            attr(pos(X,Y),class,"bg-primary"):-pos(X,Y), not _muc(sudoku(X,Y,_)), not _muc(initial(X,Y,_)).
            attr(pos(X,Y),class,"bg-danger"):-pos(X,Y), _muc(sudoku(X,Y,_)).
            attr(pos(X,Y),class,"bg-danger"):-pos(X,Y), _muc(initial(X,Y,_)).
    
    The :ref:`clinguin-state` is then enhanced by the MUC using predicate ``muc/1``.
    
    .. admonition:: Examples
        :class: example

        In the sudoku, the MUC information will show in red the faulty assumptions.

        .. code-block:: 

            attr(pos(X,Y),class,"bg-primary"):-pos(X,Y), not _muc(sudoku(X,Y,_)), not _muc(initial(X,Y,_)).
            attr(pos(X,Y),class,"bg-danger"):-pos(X,Y), _muc(sudoku(X,Y,_)).
            attr(pos(X,Y),class,"bg-danger"):-pos(X,Y), _muc(initial(X,Y,_)).


    .. autoclass:: ExplanationBackend
        :members:
        :noindex:
        :exclude-members: register_options



Creating your own backend
-------------------------

    .. warning::
        Under construction. Sorry :)
    